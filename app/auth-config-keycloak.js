import debug from 'debug'
// import {
//   configure,
//   getHelloAuth as getAuth,
//   getOidcHelloProvider as getProvider
// } from 'react-redux-auth'
import {configure} from './auth'
import getAuth from './auth/get-auth-keycloak'
import {openSnackbar} from './layout/layout-redux'

const dbg = debug('app:auth-config')

// options passed to get-keycloak-auth function obtained from keycloak admin
// see: https://keycloak.gitbooks.io/documentation/securing_apps/topics/oidc/javascript-adapter.html
//
configure({
  impl: getAuth({
    options: {
      realm: 'realm-1',
      // 'auth-server-url': 'http://127.0.0.1:9990/auth', // generated by admin as 'auth-server-url', needs to be 'authServerUrl'?
      // authServerUrl: 'http://127.0.0.1:9990/auth',
      url: 'http://127.0.0.1:9990/auth',
      'ssl-required': 'external',
      // resource: 'client-1', // generated by admin as 'resource', needs to be 'clientId'?
      clientId: 'client-1', // clientId not generated, but required?
      'public-client': true
    },
    redirectUri: 'http://localhost:8080'
  }),
  // roles can be a string, an array (or'd), or a function for custom
  rules: [
    {
      path: '/stuff',
      roles: roles => {
        return roles.includes('admin')
      }
    },
    {path: '/nonsense', roles: 'nonsense'}
  ],
  postAuthLocation: ({token}) => {
    // can customize with function (e.g. based on roles)
    dbg('post-auth-location: token=%o', token)
    return 'stuff'
  },
  notAuthorizedLocation: '/',
  onNotAuthorized: ({path, dispatch}) => {
    dbg('on-not-authorized: unable to visit route=%o, dispatch=%o', path, dispatch)
    dispatch(openSnackbar(`not authorized: unable to visit route ${path}`))
  }
})
